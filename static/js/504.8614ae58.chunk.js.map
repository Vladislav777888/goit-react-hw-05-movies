{"version":3,"file":"static/js/504.8614ae58.chunk.js","mappings":"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","sources":["components/NotFound/NotFound.styled.jsx","components/NotFound/NotFound.jsx","constants/baseUrl.js","constants/status.constants.js","components/CreditMoviesList/CreditMoviesList.styled.jsx","components/CreditMoviesList/CreditMoviesList.jsx","pages/MovieDetails/Cast/Cast.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n`;\n","import image from './noposts.jpeg';\nimport { Wrapper } from './NotFound.styled';\n\nexport const NotFound = () => {\n  return (\n    <Wrapper>\n      <img src={image} alt=\"not found\" style={{ width: 300 }} />\n    </Wrapper>\n  );\n};\n","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const FAKE_POSTER =\n  'https://freesvg.org/img/cyberscooty-movie-video-tape-remix.png';\n\nexport const FAKE_ACTOR_PHOTO =\n  'https://cdn0.iconfinder.com/data/icons/people-12/24/Anonymous-2-512.png';\n","export const STATUS = {\n  idle: 'idle',\n  loading: 'loading',\n  success: 'success',\n  error: 'error',\n};\n","import styled from 'styled-components';\n\nexport const Img = styled.img`\n  width: 100px;\n  height: 130px;\n`;\n\nexport const ActorsList = styled.ul`\n  margin-left: 16px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  list-style: disc;\n  gap: 25px;\n`;\n\nexport const ActorName = styled.p`\n  margin-top: 5px;\n`;\n\nexport const Character = styled.p`\n  margin-top: 10px;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  Img,\n  ActorsList,\n  ActorName,\n  Character,\n} from './CreditMoviesList.styled';\n\nconst CreditMoviesList = ({ credits }) => {\n  return (\n    <ActorsList>\n      {credits.map(({ id, profile_path, name, character }) => (\n        <li key={id}>\n          <Img src={profile_path} alt={name} />\n          <ActorName>{name}</ActorName>\n          <Character>Character: {character}</Character>\n        </li>\n      ))}\n    </ActorsList>\n  );\n};\n\nCreditMoviesList.propTypes = {\n  credits: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default CreditMoviesList;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from 'services';\nimport { STATUS } from 'constants';\nimport { BASE_POSTER_URL, FAKE_ACTOR_PHOTO } from 'constants/baseUrl';\n\nimport { NotFound } from 'components/NotFound';\nimport { Loader } from 'components/Loader';\nimport CreditMoviesList from 'components/CreditMoviesList';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState([]);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      setStatus(STATUS.loading);\n\n      try {\n        const { cast } = await getMovieCredits(movieId);\n\n        if (cast.length === 0) {\n          throw new Error('We have nothing for this search');\n        }\n\n        setCredits(\n          cast.map(({ id, profile_path, name, character }) => {\n            if (profile_path) {\n              return {\n                id,\n                profile_path: BASE_POSTER_URL + profile_path,\n                name,\n                character,\n              };\n            } else {\n              return {\n                id,\n                profile_path: FAKE_ACTOR_PHOTO,\n                name,\n                character,\n              };\n            }\n          })\n        );\n        setStatus(STATUS.success);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n\n    fetchMovieCredits();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === STATUS.success && (\n        <CreditMoviesList credits={credits}></CreditMoviesList>\n      )}\n      {status === STATUS.error && <NotFound />}\n      {(status === STATUS.loading || status === STATUS.idle) && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst postsApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await postsApi.get('/trending/movie/day', {\n    params: {\n      api_key: '46cf2a6d2c28bead868caabe4f80f475',\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const { data } = await postsApi.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: '46cf2a6d2c28bead868caabe4f80f475',\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const { data } = await postsApi.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: '46cf2a6d2c28bead868caabe4f80f475',\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const { data } = await postsApi.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: '46cf2a6d2c28bead868caabe4f80f475',\n    },\n  });\n\n  return data;\n};\n\nexport const getSearchMovies = async (params = {}) => {\n  const { data } = await postsApi.get(`/search/movie`, {\n    params: {\n      api_key: '46cf2a6d2c28bead868caabe4f80f475',\n      ...params,\n    },\n  });\n\n  return data;\n};\n"],"names":["Wrapper","styled","NotFound","src","image","alt","style","width","BASE_POSTER_URL","FAKE_POSTER","FAKE_ACTOR_PHOTO","STATUS","idle","loading","success","error","Img","ActorsList","ActorName","Character","credits","map","id","profile_path","name","character","movieId","useParams","useState","setCredits","status","setStatus","useEffect","fetchMovieCredits","getMovieCredits","cast","length","Error","console","log","Loader","postsApi","axios","baseURL","getTrendingMovies","get","params","api_key","data","getMovieDetails","movie_id","getMovieReviews","getSearchMovies"],"sourceRoot":""}